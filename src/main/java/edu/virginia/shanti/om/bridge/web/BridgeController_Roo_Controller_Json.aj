// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.virginia.shanti.om.bridge.web;

import edu.virginia.shanti.om.bridge.domain.Bridge;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect BridgeController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public Object BridgeController.showJson(@PathVariable("id") Long id) {
        Bridge bridge = Bridge.findBridge(id);
        if (bridge == null) {
            HttpHeaders headers= new HttpHeaders();
            headers.add("Content-Type", "application/text");
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return bridge.toJson();
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String BridgeController.listJson() {
        return Bridge.toJsonArray(Bridge.findAllBridges());
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> BridgeController.createFromJson(@RequestBody String json) {
        Bridge.fromJsonToBridge(json).persist();
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> BridgeController.createFromJsonArray(@RequestBody String json) {
        for (Bridge bridge: Bridge.fromJsonArrayToBridges(json)) {
            bridge.persist();
        }
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> BridgeController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (Bridge.fromJsonToBridge(json).merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> BridgeController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        for (Bridge bridge: Bridge.fromJsonArrayToBridges(json)) {
            if (bridge.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> BridgeController.deleteFromJson(@PathVariable("id") Long id) {
        Bridge bridge = Bridge.findBridge(id);
        HttpHeaders headers= new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (bridge == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        bridge.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByLocalContext", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String BridgeController.jsonFindBridgesByLocalContext(@RequestParam("localContext") String localContext) {
        return Bridge.toJsonArray(Bridge.findBridgesByLocalContext(localContext).getResultList());
    }
    
    @RequestMapping(params = "find=ByLocalSubContext", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String BridgeController.jsonFindBridgesByLocalSubContext(@RequestParam("localSubContext") String localSubContext) {
        return Bridge.toJsonArray(Bridge.findBridgesByLocalSubContext(localSubContext).getResultList());
    }
    
}
